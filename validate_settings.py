#!/usr/bin/env python3
"""
Script de validation pour settings.py
Teste la syntaxe et la structure sans n√©cessiter toutes les d√©pendances
"""

import sys
import os
from pathlib import Path

def validate_settings():
    """Valide le fichier settings.py"""
    print("üîç Validation du fichier settings.py...")
    
    # Test 1: Compilation Python
    try:
        import py_compile
        settings_path = Path(__file__).parent / 'my_journal_intime' / 'settings.py'
        py_compile.compile(settings_path, doraise=True)
        print("‚úÖ Test 1: Syntaxe Python - R√âUSSI")
    except py_compile.PyCompileError as e:
        print(f"‚ùå Test 1: Erreur de syntaxe - {e}")
        return False
    
    # Test 2: Import basique (sans d√©pendances)
    try:
        # Simuler les variables d'environnement pour √©viter les erreurs
        os.environ.setdefault('SECRET_KEY', 'test-key')
        os.environ.setdefault('DEBUG', 'False')
        
        # Ajouter le r√©pertoire du projet au path
        project_dir = Path(__file__).parent
        sys.path.insert(0, str(project_dir))
        
        # Mock dotenv pour √©viter l'erreur d'import
        import types
        dotenv_mock = types.ModuleType('dotenv')
        dotenv_mock.load_dotenv = lambda: None
        sys.modules['dotenv'] = dotenv_mock
        
        # Tenter l'import
        from my_journal_intime import settings
        print("‚úÖ Test 2: Structure du fichier - R√âUSSI")
        
        # Test 3: V√©rifier les configurations cl√©s
        required_settings = [
            'SECRET_KEY', 'DEBUG', 'ALLOWED_HOSTS', 'INSTALLED_APPS',
            'MIDDLEWARE', 'DATABASES', 'STATIC_URL', 'STATIC_ROOT'
        ]
        
        missing_settings = []
        for setting in required_settings:
            if not hasattr(settings, setting):
                missing_settings.append(setting)
        
        if missing_settings:
            print(f"‚ùå Test 3: Param√®tres manquants - {missing_settings}")
            return False
        else:
            print("‚úÖ Test 3: Param√®tres requis - R√âUSSI")
            
        # Test 4: V√©rifier la configuration Render
        if hasattr(settings, 'LOGGING') and isinstance(settings.LOGGING, dict):
            print("‚úÖ Test 4: Configuration LOGGING - R√âUSSI")
        else:
            print("‚ùå Test 4: Configuration LOGGING - √âCHOU√â")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Test 2: Erreur d'import - {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ Validation des corrections de settings.py\n")
    
    if validate_settings():
        print("\nüéâ TOUTES LES VALIDATIONS SONT R√âUSSIES !")
        print("‚úÖ Le fichier settings.py est maintenant correct")
        print("‚úÖ Pr√™t pour le d√©ploiement sur Render")
        return 0
    else:
        print("\n‚ùå √âCHEC DE LA VALIDATION")
        print("‚ö†Ô∏è  Veuillez corriger les erreurs avant de continuer")
        return 1

if __name__ == "__main__":
    sys.exit(main())