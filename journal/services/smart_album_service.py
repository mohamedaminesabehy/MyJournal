"""
Service de cr√©ation automatique d'albums intelligents bas√©s sur l'IA
"""
import logging
from typing import List, Dict, Optional
from datetime import datetime, timedelta
from django.db.models import Count, Q
from django.contrib.auth.models import User
from ..models import Media, MediaAnalysis, SmartAlbum

logger = logging.getLogger(__name__)


class SmartAlbumService:
    """Service pour cr√©er et g√©rer des albums intelligents automatiquement"""
    
    def __init__(self):
        self.album_rules = {
            # Albums par lieux/monuments
            'beaches': {
                'name': 'üèñÔ∏è Plages et Mer',
                'description': 'Toutes vos photos de plages et bords de mer',
                'objects': ['mer', 'plage', 'sable', 'oc√©an', 'beach', 'ocean'],
                'min_media': 1,
                'icon': 'üèñÔ∏è'
            },
            'monuments': {
                'name': 'üèõÔ∏è Monuments et Architecture',
                'description': 'Photos de monuments et b√¢timents remarquables',
                'objects': ['monument', 'building', 'architecture', 'tower', 'ch√¢teau', '√©glise', 'place'],
                'locations': ['Tour Eiffel', 'Big Ben', 'Colosseum', 'Statue of Liberty', 'Pyramides', 'Arc de Triomphe', 'Architecture moderne'],
                'min_media': 1,
                'icon': 'üèõÔ∏è'
            },
            'nature': {
                'name': 'üå≥ Nature et Paysages',
                'description': 'Vos plus beaux paysages naturels',
                'objects': ['tree', 'forest', 'mountain', 'river', 'lake', 'arbre', 'montagne', 'for√™t'],
                'min_media': 3,
                'icon': 'üå≥'
            },
            
            # Albums par personnes
            'people': {
                'name': 'üë• Personnes',
                'description': 'Photos avec des personnes',
                'objects': ['person', 'personne', 'people', 'face', 'visage'],
                'min_media': 1,
                'icon': 'üë•'
            },
            
            # Albums par nourriture
            'food': {
                'name': 'üçï Nourriture',
                'description': 'Vos photos culinaires',
                'objects': ['food', 'pizza', 'burger', 'cake', 'nourriture', 'g√¢teau'],
                'min_media': 2,
                'icon': 'üçï'
            },
            
            # Albums par √©motions
            'peaceful': {
                'name': 'üòå Moments Paisibles',
                'description': 'Photos √† l\'ambiance calme et sereine',
                'emotions': ['peaceful', 'calm', 'serene', 'quiet'],
                'min_media': 3,
                'icon': 'üòå'
            },
            'joyful': {
                'name': 'üòä Moments Joyeux',
                'description': 'Photos pleines de joie et de bonheur',
                'emotions': ['joyful', 'happy', 'cheerful', 'celebration'],
                'min_media': 3,
                'icon': 'üòä'
            },
            
            # Albums par couleurs
            'blue_dominant': {
                'name': 'üíô Dominante Bleue',
                'description': 'Photos aux tons bleus',
                'color_keywords': ['bleu', 'blue', 'cyan', 'turquoise'],
                'min_media': 3,
                'icon': 'üíô'
            },
            'warm_colors': {
                'name': 'üß° Tons Chauds',
                'description': 'Photos aux couleurs chaudes (rouge, orange, jaune)',
                'color_keywords': ['rouge', 'orange', 'jaune', 'red', 'yellow'],
                'min_media': 3,
                'icon': 'üß°'
            },
            
            # Albums par p√©riode
            'recent': {
                'name': 'üìÖ Cette Semaine',
                'description': 'Photos upload√©es cette semaine',
                'days_ago': 7,
                'min_media': 2,
                'icon': 'üìÖ'
            },
            'this_month': {
                'name': 'üìÜ Ce Mois',
                'description': 'Photos upload√©es ce mois',
                'days_ago': 30,
                'min_media': 3,
                'icon': 'üìÜ'
            },
            
            # Albums par qualit√©
            'favorites': {
                'name': '‚≠ê Favoris',
                'description': 'Vos photos favorites',
                'is_favorite': True,
                'min_media': 1,
                'icon': '‚≠ê'
            },
        }
    
    def create_all_smart_albums(self, user: User, force_recreate: bool = False) -> Dict:
        """
        Cr√©e tous les albums intelligents pour un utilisateur
        
        Args:
            user: L'utilisateur
            force_recreate: Si True, supprime et recr√©e tous les albums auto
            
        Returns:
            Dict avec les statistiques de cr√©ation
        """
        logger.info(f"üé® Cr√©ation d'albums intelligents pour {user.username}")
        
        stats = {
            'created': 0,
            'updated': 0,
            'skipped': 0,
            'albums': []
        }
        
        # Supprimer les anciens albums auto si demand√©
        if force_recreate:
            deleted_count = SmartAlbum.objects.filter(
                user=user,
                album_type='auto'
            ).delete()[0]
            logger.info(f"üóëÔ∏è {deleted_count} anciens albums supprim√©s")
        
        # Cr√©er chaque type d'album
        for album_key, album_config in self.album_rules.items():
            try:
                result = self._create_album_by_rule(user, album_key, album_config)
                
                if result['created']:
                    stats['created'] += 1
                    stats['albums'].append(result['album'])
                    logger.info(f"‚úÖ Album cr√©√©: {result['album'].name} ({result['media_count']} m√©dias)")
                elif result['updated']:
                    stats['updated'] += 1
                    logger.info(f"üîÑ Album mis √† jour: {result['album'].name} ({result['media_count']} m√©dias)")
                else:
                    stats['skipped'] += 1
                    logger.info(f"‚è≠Ô∏è Album ignor√©: {album_config['name']} (pas assez de m√©dias)")
                    
            except Exception as e:
                logger.error(f"‚ùå Erreur cr√©ation album {album_key}: {e}")
        
        logger.info(f"‚ú® Termin√©! Cr√©√©s: {stats['created']}, Mis √† jour: {stats['updated']}, Ignor√©s: {stats['skipped']}")
        return stats
    
    def _create_album_by_rule(self, user: User, album_key: str, config: Dict) -> Dict:
        """
        Cr√©e un album bas√© sur une r√®gle
        
        Returns:
            Dict avec 'created', 'updated', 'album', 'media_count'
        """
        # R√©cup√©rer les m√©dias correspondants
        media_list = self._get_media_by_criteria(user, config)
        
        # V√©rifier le minimum requis
        if len(media_list) < config.get('min_media', 1):
            return {
                'created': False,
                'updated': False,
                'album': None,
                'media_count': len(media_list)
            }
        
        # Cr√©er ou mettre √† jour l'album
        album_name = config['name']
        
        try:
            album = SmartAlbum.objects.get(
                user=user,
                name=album_name,
                album_type='auto'
            )
            created = False
        except SmartAlbum.DoesNotExist:
            # Utiliser .create() au lieu de .save() pour Djongo
            album = SmartAlbum.objects.create(
                user=user,
                name=album_name,
                album_type='auto',
                description=config['description'],
                filter_criteria={
                    'rule_key': album_key,
                    **config
                }
            )
            created = True
        
        # Mettre √† jour les m√©dias - Utiliser .add() au lieu de .set() pour Djongo
        album.media.clear()  # Vider d'abord
        for media in media_list:
            album.media.add(media)
        
        # D√©finir l'image de couverture (le plus r√©cent)
        if media_list:
            album.cover_image = media_list[0]
            album.save()
        
        return {
            'created': created,
            'updated': not created,
            'album': album,
            'media_count': len(media_list)
        }
    
    def _get_media_by_criteria(self, user: User, config: Dict) -> List[Media]:
        """
        R√©cup√®re les m√©dias correspondant aux crit√®res
        """
        # Base query: m√©dias de l'utilisateur
        # Note: Djongo a des probl√®mes avec les filtres bool√©ens, donc on filtre apr√®s
        queryset = Media.objects.filter(
            user=user,
            media_type='image'  # Pour l'instant, seulement les images
        )
        
        # Filtre par p√©riode
        if 'days_ago' in config:
            date_limit = datetime.now() - timedelta(days=config['days_ago'])
            queryset = queryset.filter(uploaded_at__gte=date_limit)
        
        # Filtre par favoris
        if config.get('is_favorite'):
            # Djongo workaround: filtrer en Python
            queryset = [m for m in queryset if m.is_favorite]
            queryset = Media.objects.filter(id__in=[m.id for m in queryset]) if queryset else Media.objects.none()
        
        # Filtrer seulement les m√©dias analys√©s (workaround Djongo)
        analyzed_ids = []
        for media in queryset:
            if media.is_analyzed:
                try:
                    # Tenter d'acc√©der √† l'analyse
                    _ = media.analysis
                    analyzed_ids.append(media.id)
                except MediaAnalysis.DoesNotExist:
                    # Pas d'analyse pour ce m√©dia
                    pass
                except MediaAnalysis.MultipleObjectsReturned:
                    # Plusieurs analyses (erreur de donn√©es) - prendre le m√©dia quand m√™me
                    logger.warning(f"‚ö†Ô∏è Plusieurs analyses pour media {media.id}")
                    analyzed_ids.append(media.id)
        
        if not analyzed_ids:
            return []
        
        queryset = Media.objects.filter(id__in=analyzed_ids)
        
        # Filtre par objets d√©tect√©s
        if 'objects' in config:
            matching_ids = []
            for media in queryset:
                try:
                    analysis = media.analysis
                    if analysis.detected_objects:
                        # V√©rifier si au moins un objet correspond
                        detected = analysis.detected_objects
                        if isinstance(detected, list):
                            for obj in config['objects']:
                                if any(obj.lower() in str(d).lower() for d in detected):
                                    matching_ids.append(media.id)
                                    break
                except (MediaAnalysis.DoesNotExist, MediaAnalysis.MultipleObjectsReturned) as e:
                    if isinstance(e, MediaAnalysis.MultipleObjectsReturned):
                        # Utiliser la premi√®re analyse en cas de doublons
                        analysis = MediaAnalysis.objects.filter(media=media).first()
                        if analysis and analysis.detected_objects:
                            detected = analysis.detected_objects
                            if isinstance(detected, list):
                                for obj in config['objects']:
                                    if any(obj.lower() in str(d).lower() for d in detected):
                                        matching_ids.append(media.id)
                                        break
            
            if not matching_ids:
                return []
            queryset = Media.objects.filter(id__in=matching_ids)
        
        # Filtre par lieux
        if 'locations' in config:
            matching_ids = []
            for media in queryset:
                try:
                    analysis = media.analysis
                    if analysis.detected_locations:
                        detected = analysis.detected_locations
                        if isinstance(detected, list):
                            for loc in config['locations']:
                                if any(loc.lower() in str(d).lower() for d in detected):
                                    matching_ids.append(media.id)
                                    break
                except (MediaAnalysis.DoesNotExist, MediaAnalysis.MultipleObjectsReturned) as e:
                    if isinstance(e, MediaAnalysis.MultipleObjectsReturned):
                        # Utiliser la premi√®re analyse en cas de doublons
                        analysis = MediaAnalysis.objects.filter(media=media).first()
                        if analysis and analysis.detected_locations:
                            detected = analysis.detected_locations
                            if isinstance(detected, list):
                                for loc in config['locations']:
                                    if any(loc.lower() in str(d).lower() for d in detected):
                                        matching_ids.append(media.id)
                                        break
            
            if not matching_ids:
                return []
            queryset = Media.objects.filter(id__in=matching_ids)
        
        # Filtre par √©motions
        if 'emotions' in config:
            matching_ids = []
            for media in queryset:
                try:
                    analysis = media.analysis
                    if analysis.detected_emotions:
                        detected = analysis.detected_emotions
                        if isinstance(detected, list):
                            for emotion in config['emotions']:
                                if any(emotion.lower() in str(d).lower() for d in detected):
                                    matching_ids.append(media.id)
                                    break
                except (MediaAnalysis.DoesNotExist, MediaAnalysis.MultipleObjectsReturned) as e:
                    if isinstance(e, MediaAnalysis.MultipleObjectsReturned):
                        # Utiliser la premi√®re analyse en cas de doublons
                        analysis = MediaAnalysis.objects.filter(media=media).first()
                        if analysis and analysis.detected_emotions:
                            detected = analysis.detected_emotions
                            if isinstance(detected, list):
                                for emotion in config['emotions']:
                                    if any(emotion.lower() in str(d).lower() for d in detected):
                                        matching_ids.append(media.id)
                                        break
            
            if not matching_ids:
                return []
            queryset = Media.objects.filter(id__in=matching_ids)
        
        # Filtre par couleurs
        if 'color_keywords' in config:
            matching_ids = []
            for media in queryset:
                try:
                    analysis = media.analysis
                    if analysis.dominant_colors:
                        colors = analysis.dominant_colors
                        if isinstance(colors, list):
                            colors_str = ' '.join([str(c) for c in colors]).lower()
                            for color in config['color_keywords']:
                                if color.lower() in colors_str:
                                    matching_ids.append(media.id)
                                    break
                except (MediaAnalysis.DoesNotExist, MediaAnalysis.MultipleObjectsReturned) as e:
                    if isinstance(e, MediaAnalysis.MultipleObjectsReturned):
                        # Utiliser la premi√®re analyse en cas de doublons
                        analysis = MediaAnalysis.objects.filter(media=media).first()
                        if analysis and analysis.dominant_colors:
                            colors = analysis.dominant_colors
                            if isinstance(colors, list):
                                colors_str = ' '.join([str(c) for c in colors]).lower()
                                for color in config['color_keywords']:
                                    if color.lower() in colors_str:
                                        matching_ids.append(media.id)
                                        break
            
            if not matching_ids:
                return []
            queryset = Media.objects.filter(id__in=matching_ids)
        
        # Distinct et ordonn√© par date d√©croissante
        return list(queryset.distinct().order_by('-uploaded_at'))
    
    def get_album_suggestions(self, user: User) -> List[Dict]:
        """
        Sugg√®re des albums potentiels sans les cr√©er
        
        Returns:
            Liste de suggestions avec nombre de m√©dias potentiels
        """
        suggestions = []
        
        for album_key, config in self.album_rules.items():
            media_list = self._get_media_by_criteria(user, config)
            
            if len(media_list) >= config.get('min_media', 1):
                suggestions.append({
                    'key': album_key,
                    'name': config['name'],
                    'description': config['description'],
                    'icon': config.get('icon', 'üìÅ'),
                    'media_count': len(media_list),
                    'can_create': True
                })
        
        # Trier par nombre de m√©dias d√©croissant
        suggestions.sort(key=lambda x: x['media_count'], reverse=True)
        return suggestions
    
    def update_album(self, album_id: int) -> Optional[SmartAlbum]:
        """
        Met √† jour un album intelligent existant
        """
        try:
            album = SmartAlbum.objects.get(id=album_id, album_type='auto')
            
            # R√©cup√©rer la r√®gle d'origine
            rule_key = album.filter_criteria.get('rule_key')
            if not rule_key or rule_key not in self.album_rules:
                logger.warning(f"‚ö†Ô∏è R√®gle non trouv√©e pour l'album {album.name}")
                return None
            
            config = self.album_rules[rule_key]
            media_list = self._get_media_by_criteria(album.user, config)
            
            # Mettre √† jour
            album.media.set(media_list)
            if media_list:
                album.cover_image = media_list[0]
            album.save()
            
            logger.info(f"üîÑ Album mis √† jour: {album.name} ({len(media_list)} m√©dias)")
            return album
            
        except SmartAlbum.DoesNotExist:
            logger.error(f"‚ùå Album {album_id} non trouv√©")
            return None
    
    def delete_empty_albums(self, user: User) -> int:
        """
        Supprime les albums automatiques vides
        """
        empty_albums = SmartAlbum.objects.filter(
            user=user,
            album_type='auto',
            media__isnull=True
        )
        count = empty_albums.count()
        empty_albums.delete()
        
        logger.info(f"üóëÔ∏è {count} albums vides supprim√©s")
        return count


# Instance globale du service
smart_album_service = SmartAlbumService()
